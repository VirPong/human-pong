\documentclass[12pt]{article}

\usepackage{hyperref}

% useful for formatting (align*, etc.) and for certain symbols (the QED box, etc.)
\usepackage{amsmath, amssymb, amsthm}

% for including graphics
\usepackage{graphicx}

% for conveniently specifying the spacing (\singlespacing, \doublespacing,
%    \onehalfspacing, etc.)
\usepackage{setspace}
\onehalfspacing

% this does some sort of symbol stuff
\usepackage{textcomp}

% A package for conveniently adjusting headers and such
\usepackage{fancyhdr}
\renewcommand{\headrulewidth}{0 pt}
\rhead{\textit{\thepage}}
\cfoot{}

\usepackage{hyperref}

% Set the margins
\usepackage[top=1.8cm, bottom=1.8cm, left=1.8cm, right=1.8cm]{geometry}

% Differently spaced itemize
\newenvironment{itemize*}%
 {\begin{itemize}%
     \setlength{\parsep}{0pt}
    \setlength{\itemsep}{0pt}%
    \setlength{\parskip}{0pt}}%
 {\end{itemize}}
\newenvironment{enumerate*}%
 {\begin{enumerate}%
     \setlength{\parsep}{0pt}
    \setlength{\itemsep}{0pt}%
    \setlength{\parskip}{0pt}}%
 {\end{enumerate}}


% set up a new command to insert a little bit of vertical space
% (use this BEFORE a line break)
\newcommand{\padding}{\vspace*{.5cm}}

% set up an environment to format each hw problem in
\newenvironment{problem}[1]{\noindent\textbf{#1.}}{\vspace*{.5cm}}

\newenvironment{proof*}{\par\noindent{\bf Proof}\quad}
              {\quad\vrule height 8pt depth 0pt width 8pt\medskip\par}




\begin{document}


\section{Install Node.js}
\textbf{Version:}1.0\\
\textbf{Description:} Attempt to use documentation for Node JS installation.
\textbf{Pre-conditions:} Ubuntu 10.10 or later is installed on a machine with network access.\\
\textbf{Post-conditions:} The Node JS is installed on the server and ready for use.
\textbf{Scenario:}
\begin{enumerate}
 \item Go to section $5.2.1$ of the Server Team intermediate report.
 \item Follow each step indicated to install Node.js.
 \item Follow the instructions to install socket.io and express.
\end{enumerate}
\textbf{Expected Results:} Node.js is installed and operational.\\
\textbf{Pass/Fail:} Fail
\textbf{Comments:} The user should be encouraged to install the build packages necessary on their system.  Sources should be cited for credit and more assistance should it be needed.  Also, the instruction to “cd <your directory name>” for express installation is entirely unhelpful.  \\

\section{Install MongoDB}
\textbf{Version:}1.0\\
\textbf{Description:} Attempt to use documentation for MongoDB installation.
\textbf{Pre-conditions:} Ubuntu 10.10 or later is installed on a machine with network access.\\
\textbf{Post-conditions:} MongoDB is installed on the server and ready for use.
\textbf{Scenario:}
\begin{enumerate}
 \item Go to section $5.2.1$ of the Server Team intermediate report.
 \item Follow each step indicated to install MongoDB.
\end{enumerate}
\textbf{Expected Results:} MongoDB is installed and operational.\\
\textbf{Pass/Fail:} Fail
\textbf{Comments:} The install documentation should provide references or links to resources for installation.  Installation following the procedures given is incorrect.  The downloaded source is never actually used.  Also, the use of “sudo apt-get mongodb” assumes that the package is in the repository of the user’s system and that he or she is using a Debian based system.  Lastly, the final paragraph of the installation instructions is very confusing.

\section{Interface with the Server}
\textbf{Version:}1.0\\
\textbf{Description:} Design a client to interact with the server.\\
\textbf{Pre-conditions:} None.\\
\textbf{Post-conditions:} A client exists that can communicate with the server in a meaningful way.
\textbf{Scenario:}
\begin{enumerate}
 \item Understand the server through documentation and an API.
 \item Develop a client to interact with the server.
 \item Use the client.
\end{enumerate}
\textbf{Expected Results:} Developing a client for the server makes sense and is not impeded by a lack of understanding.\\
\textbf{Pass/Fail:} Fail
\textbf{Comments:} There needs to be an API to understand the server.  As is, the documentation and looking at the code are very confusing for a new developer.  While an API may seem like a secondary goal, developing without one is impossible without intimate knowledge of the server code.


\section{Running an initial test of the server code}
\label{sec:initialTest}
\textbf{Version:}1.0\\
\textbf{Description:} Using the most recent version of the paddle-meister code, run the server using node and try to connect with WebUI code from the mid-term demo.
\textbf{Pre-conditions:} Node JS installed and paddle-meister up to date.  A web browser and the WebUI’s demo code for the pong view are also required on a test machine (server or other machine).
\textbf{Post-conditions:} Server logs output for client connections and client side draws or at least does something.
\textbf{Steps:}
\begin{enumerate}
 \item Run the server file using “node server.js”.
 \item Open the client files in browser (twice, once per tab in browser).
 \item Observe output.
\end{enumerate}
\textbf{Expected Results:} Both client and server produce output suggesting a successful connection.\\
\textbf{Pass/Fail} Fail\\
\textbf{Comments:} The most recent server.js file does not work.  We had to revert to the demo version after discussing with the server team.



\section{First client connecting to system}
\textbf{Version:}1.0\\
\textbf{Description:}Test successful client initiated communication between the server and client.\\
\textbf{Pre-conditions:}Client has access to network, system is connected to network and accepting connections, system has no other clients connected.\\
\textbf{Post-conditions:}Client has initiated connection and server has responded.\\
\textbf{Scenario:}
\begin{enumerate}
 \item Client requests connection with system.
 \item System accepts connection...
\end{enumerate}
\textbf{Expected Results:}It should just work. Server will notice the attempt to be connected to and will act accordingly.
\textbf{Results:}Pass. System makes connection with client.

\section{Client ID generated and signal}
\textbf{Version:}1.0\\
\textbf{Description:}Test for successful generation and passing of client ID.\\
\textbf{Pre-conditions:}Client has access to network, system is connected to network and accepting connections, system has just received a request to connect from client.\\
\textbf{Post-conditions:}Client has received system generated ID and ready signal.\\
\textbf{Scenario:}
\begin{enumerate}
 \item Test case one passes.
 \item System generates Client ID.
 \item System sends client its ID and ready signal.
\end{enumerate}
\textbf{Expected Results:}Client receives a unique ID and a ready signal.\\
\textbf{Pass/Fail:} Fail\\
\textbf{Comments:} Client sent ID client indicated in initiating game.\\


\section{A Client Connecting To An Open Game}
\label{sec:openGameConnect}
\textbf{Version:} 1.0\\
\textbf{Description:} A Client connects to system requesting a specific game session, and system connects Client to existing game session with an already-connected Client and begins game session, communicating game data.\\
\textbf{Pre-conditions:} System and Clients operational on the same network, One Player is already connected waiting for a challenger.  Using the VisualClient.
Post-conditions: Game has begun between Clients.
Scenario:
\begin{enumerate}
\item Client communicates to server which open game it wants to play, and System opens communication between client and client already in open game.
\item System initializes the game state, the game is started.
\item Paddle position is transmitted from client to the system.
\item System transmits clients’ paddle position, ball position, and score data back to client.
\end{enumerate}
\textbf{Expected Results:} The changes in paddle position of both Clients are recorded by the System and communicated to both clients in synchronization; both Clients are displaying same game state.\\
\textbf{Pass/Fail:} Mostly success.
\textbf{Comments:} The client can not select a game; however, the client can connect to a single game.

\section{A Client Connecting To A Full Game}
\label{sec:fullGameConnect}
\textbf{Version:}1.0\\
\textbf{Description:} A Client connects to system requesting a specific game session, System notifies Client of full status of session and does not give Client access.\\
\textbf{Pre-conditions:} System and Clients operational on the same network, Game Session occupied by two Clients. Using VisualClient.\\
\textbf{Post-conditions:} Client returns to game listing.\\
Scenario:
\begin{enumerate}
\item Client communicates to server which game it wants to play
\item System discovers game session is full.
\item System notifies Client of error and does not admit to game session.
\end{enumerate}
\textbf{Expected Results:} Client has received error message.\\
\textbf{Pass/Fail:} Fail\\
\textbf{Comments:} This feature is not yet implemented.


\section{Many Spectators}
\label{sec:manySpectators}
\textbf{Version:}1.0\\
\textbf{Description:} Spectators connect to watch a game.\\
\textbf{Pre-conditions:} System and Clients operational on the same network.  Game has begun for playing clients (using PlayerClient or VisualClient).  SpectatorClient is used to connect as a spectator.\\
\textbf{Post-conditions:} Game proceeds for clients and spectators are able to view the game.\\
Scenario:
\begin{enumerate}
\item Spectator selects to watch a game.
\item Spectator registers with server.
\item Repeat steps 1 and 2 several times. (Refreshing the page can do this.)
\end{enumerate}
\textbf{Expected Results:} The game proceeds up to reasonable expectations.\\
\textbf{Pass/Fail:} Fail\\
\textbf{Comments:} For each newly connected spectator, or player, the ball visibly gains speed.  Head to line $144$ for the if-statement that causes this issue.


\section{Two players play a game, disregarding paddle logic}
\label{sec:gameNoLogic}
\textbf{Version:}1.0\\
\textbf{Description:} Two PlayerClients play a Pong game.\\
\textbf{Pre-conditions:} System and Clients operational on the same network.  Game has begun for two playing clients (using PlayerClient or VisualClient).\\
\textbf{Post-conditions:} Game continues for both players.\\
Scenario:
\begin{enumerate}
\item System sends ball movement to both users.
\item System receives position data information from client.
\item System informs game logic of movement.
\item System sends position data to other client.
\end{enumerate}
\textbf{Expected Results:} The game will continue to be playable between two users.
\textbf{Pass/Fail:} Fail\\
\textbf{Comments:} When a new PlayerClient or a SpectatorClient joins an existing game between two PlayerClients, both paddles (Player1’s paddle and Player2’s paddle) will be moved to the default positions.

\section{ Update player scores-Client1 scores 1 point}
\textbf{Version:}1.0\\
\textbf{Description:} This will test if any defects appear when a client scores a point. The game logic should determine no collision, and the system should increment the point winner's score, and send the updated score to each client.\\
\textbf{Pre-conditions:} System Operational, Client1 and Client2 logged in and participating in game \\
\textbf{Post-conditions:} Game continues\\
\textbf{Scenario:}
\begin{enumerate}
\item Client1 moves to hit the ball.\\
\item Game logic determines ball movement.\\
\item Client2 does not move.\\
\item Game logic determines no collision. \\
\item System should send updated score to both Client1 and Client2.\\
\end{enumerate}
\textbf{Expected Results:} Client receives updated score reflected as Client1 has 1 point, Client 2 has 0 points. Game should continue.\\
\textbf{Pass/Fail:}Fail\\
\textbf{Comment:} Due to the fact that the server does not send the updated score to the clients, boundary and functionality testing was not conducted on the score keeping.\\
\noindent \textbf{Test Case:} Game Logic- Paddle Logic Usability\\
\textbf{Version:}1.0\\
\textbf{Description:} This will test if any defects appear when a client is using the paddle to hit the ball.\\
\textbf{Pre-conditions:} System Operational, Client1 and Client2 logged in and participating in game \\
\textbf{Post-conditions:} Game continues\\
\textbf{Scenario:}
\begin{enumerate}
\item Client1 moves to hit the ball.\\
\item Game logic determines collision when Client1's paddle comes in any contact with the ball. \\
\item Game logic determines ball movement.\\
\end{enumerate}
\textbf{Expected Results:} Client can hit ball with any part of their paddle.\\
\textbf{Pass/Fail:}Fail\\
\textbf{Comments:} Client would like to be able to hit the ball with the side of their paddle, not just the face.\\


\section{Game Logic- Ball Logic Usability}
\textbf{Version:}1.0\\
\textbf{Description:} This will test if any defects appear in ball when client plays a game.\\
\textbf{Pre-conditions:} System Operational, Client1 and Client2 logged in and participating in game \\
\textbf{Post-conditions:} Game continues\\
\textbf{Scenario:}
\begin{enumerate}
\item Client1 moves to hit the ball.\\
\item Game logic determines collision when Client1's paddle comes in any contact with the ball. \\
\item Game logic determines ball movement.\\
\item Client2 moves to hit the ball.\\
\item Game logic determines collision when Client2's paddle comes in any contact with the ball. \\
\item Game logic determines ball movement.\\
\end{enumerate}
\textbf{Expected Results:} Client finds ball movement to be logical and usable.\\
\textbf{Pass/Fail:} Pass\\
\textbf{Comments:} Client would like more diversity in initial ball movement, both in which direction the ball is served as well as to which client the ball is served.\\

\section{Between Client Latency}
\textbf{Version:}1.0\\
\textbf{Description:} This will test if any defects appear in the latency between separate clients (both players and spectators) logged into the same game.\\
\textbf{Pre-conditions:} System Operational, Client1 and Client2 logged in and participating in game, Client3 (a spectator) is logged on watching. \\
\textbf{Post-conditions:} Game continues\\
\textbf{Scenario:}
\begin{enumerate}
\item Clients continually play and watch the game from different computers.\\
\item Clients notice the latency between the computers, both from the players' and spectators' computers.\\
\end{enumerate}
\textbf{Expected Results:} Client finds that the game is running simultaneously on every computer.\\
\textbf{Pass/Fail:}Pass\\

\section{Two clients play a game until a winner is determined}
\textbf{Description:} This test will determine whether a game informs a client of the score based upon the score limit for a game.
\textbf{Pre-conditions:} The system is in operation, two clients are connected to the system, clients are prepared to start a game\\
\textbf{Post-conditions:} The game is complete\\
\textbf{Scenario:}
\begin{enumerate}
\item System pairs users
\item Game logic sets players and ball at default positions
\item System informs clients of game start
\item Game logic starts ball movement
\item System sends ball movement to both users
\item System receives position data information from client
\item System informs game logic of movement
\item System sends position data to other client
\item Game logic determines no collision
\item User receives a point\\
\emph{Repeat 4 - 10 until score limit} - Score limit not reached by 50 ‘non-collisions’
\item System informs client of score
\end{enumerate}
\emph{Return to 5}\\
\textbf{Expected Results:} A game informs client of the score, after reaching the game score limit.
\textbf{Pass/Fail:} Fail
\textbf{Comments:} No score limit is reached. After 50 ‘non-collisions’, or scores, the game did not inform the client of the score


\section{Available game information sent}
\textbf{Version:}1.0\\
\textbf{Description:}Test for transmission of current available games.
\textbf{Pre-conditions:}Client has access to network, system is connected to network and accepting connections, system has just received a request to connect from client and received ID and ready signal.\\
\textbf{Post-conditions:}Client knows what current games are available.\\
\textbf{Scenario:}
\begin{enumerate}
 \item Test case two passes.
 \item Server sends client available game info.
 \item Client receives info.
\end{enumerate}
\textbf{Expected Results:}Client receives information about current games.\\
\textbf{Results:}Feature not implemented yet. No information about current games sent.\\


\section{Request client start new game}
\textbf{Version:}1.0\\
\textbf{Description:}Test system behavior if no current games are available.
\textbf{Pre-conditions:}Client has access to network, system is connected to network and accepting connections, system has just received a request to connect from client and recieved ID and ready signal.\\
\textbf{Post-conditions:}Client is asked to start a new game.\\
\textbf{Scenario:}
\begin{enumerate}
 \item Test case two passes.
 \item System discovers no games currently exist.
 \item System asks client to start a new game.
\end{enumerate}
\textbf{Expected Results:}Client asked to start new game.\\
\textbf{Pass/Fail:} Feature not implemented yet. \\
\textbf{Comments:} The server doesn't ask; it just starts new game.\\

\section{Desired communication time}
\textbf{Version:}1.0\\
\textbf{Description:} This test will quantify the latency between issuing a paddle movement on the website, and when the client receives a ‘gameUpdate’ event corresponding to the paddle movement issued.\\
\textbf{Pre-conditions:} Server is running Pong code, two clients are connected to a Pong game, a Pong game is in progress.\\
\textbf{Test structure:} A timing-event start is placed at the updatePaddleToServer method, and a timing-event stop is placed at the updateGame event listener.\\
\textbf{Scenario:}\\
\begin{enumerate}
    \item A client moves their pong Paddle
    \item The client code sends updated paddle location to server
    \item The client code starts a timer
    \item The system sends updated game information to the client code
    \item The client code stops the timer
\end{enumerate}
\textbf{Outcome:} Average time for 25 time-points is 29.52milliseconds with standard deviation of 14.08 milliseconds\\
\textbf{Comments:}
    \begin{enumerate}
        \item Server code has a hard-coded response interval of 50 milliseconds
        \item In the test, the client machine was able to ping the server and get an average response of 1 millisecond
    \end{enumerate}

\section{Client 1 waiting for Client 2}
\textbf{Version:}1.0\\
\textbf{Description:} This test will check whether Client 1 is able to wait for Client 2 to join. \\
\textbf{Pre-conditions:} The server is running Pong code, no clients are connected to the game\\
\textbf{Post-conditions:} Game begins when Client 2 joins the game
\textbf{Scenario:}
\begin{enumerate}
    \item Client 1 navigates to the gamePlay webpage
    \item Client code notifies server that they have connected
    \item Server accepts client as a player 1
    \item Server waits for another client to join
    \item Client 2 connects to gamePlay webpage
    \item Client code notifies server that they have connected
    \item Server accepts client 2 as player 2
    \item Game begins
\end{enumerate}
\textbf{Expected Results:}
\begin{enumerate}
    \item The game will wait for two players to join
    \item The game will begin when two players join
\end{enumerate}
\textbf{Pass/Fail:} Will commonly pass, sometimes fail
\textbf{Comments:} If only Client 1 is connected, and Client 2 has not yet joined, Client 1 can crash the server. If Client 1 presses any key (whether it is a movement key, or a any keyboard input) before before Client 2 has connected, this will cause the server to crash, and not recover.
\textbf{Code:} The server crashes at line 152 of Server.js


\section{Client warning on system inability to store data}
\textbf{Version:}1.0\\
\textbf{Description:}See if the system hands out a message.\\
\textbf{Pre-conditions:}Client has access to network, system is connected to network and accepting connections, client connected.\\
\textbf{Post-conditions:}Client recieved message saying game data could not be stored.\\
\textbf{Scenario:}
\begin{enumerate}
 \item Play game
 \item recieve warning
\end{enumerate}
\textbf{Expected Results:}Client receives message\\
\textbf{Pass/Fail:} Fail\\
\textbf{Comments:} No message. Not even a database.\\



\end{document}